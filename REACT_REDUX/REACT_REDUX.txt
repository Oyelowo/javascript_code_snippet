React and Redux: Getting Started with React Redux
class DisplayMessages extends React.Component {
  // change code below this line
  constructor(props){
    super(props);
      this.state = {
        input : "",
        messages : []
      }
  }

  // change code above this line
  render() {
    return <div />
  }
};




React and Redux: Manage State Locally First
class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this)
  }
  
  // add handleChange() and submitMessage() methods here
handleChange(event){
this.setState({input: event.target.value
    });
  }

  
submitMessage(){
const currentMessage = this.state.input;
this.setState({
      input: '',
      messages: this.state.messages.concat(currentMessage)
    });
}

  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        { /* render an input, button, and ul here */ }
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
    		<button onClick={this.submitMessage}>Submit</button>
    		<ul>
	
              {this.state.messages.map( (message, idx) =>(
<li key={idx}>{message}</li>))}
              {/*alternative
              {this.state.messages.map( (message, idx) => { 	return (<li key={idx}>{message}</li>) })} */}
	    	</ul>

        { /* change code above this line */ }
      </div>
    );
  }
};










React and Redux: Extract State Logic to Redux
// define ADD, addMessage(), messageReducer(), and store here:
const ADD = 'ADD';

const addMessage = (message) =>  ({
    type: ADD,
    message
  });

/* alternative to above function
const addMessage = (message) => {
	return {
    type: ADD,
    message
  }
};
*/

const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    default:
      return state;
  }
};

const store = Redux.createStore(messageReducer);












React and Redux: Use Provider to Connect Redux to React
// Redux Code:
const ADD = 'ADD';

const addMessage = (message) => {
  return {
    type: ADD,
    message
  }
};

const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    default:
      return state;
  }
};



const store = Redux.createStore(messageReducer);

// React Code:

class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  submitMessage() {
    const currentMessage = this.state.input;
    this.setState({
      input: '',
      messages: this.state.messages.concat(currentMessage)
    });
  }
  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.state.messages.map( (message, idx) => {
              return (
                 <li key={idx}>{message}</li>
              )
            })
          }
        </ul>
      </div>
    );
  }
};

const Provider = ReactRedux.Provider;

class AppWrapper extends React.Component {
  // render the Provider here
render(){
  return (<Provider store={store}>
  <DisplayMessages/>
</Provider>)
}
  // change code above this line
};



React and Redux: Map State to Props
// change code below this line
const state = [];

// change code below this line
mapStateToProps = (state) =>({messages: state})


/* Alternative
const mapStateToProps = (state) => {
  return {
  	messages: state
  }
};
*/





React and Redux: Map Dispatch to Props
const addMessage = (message) => {
  return {
    type: 'ADD',
    message: message
  }
};

// change code below this line
mapDispatchToProps = (dispatch)=>{
  return{
 submitNewMessage: function(message) {
   dispatch(addMessage(message));
 }
}}

