// 1. Sum All Numbers in a Range

function sumAll(arr) {
let acummulate=0;
  for(i=Math.min(...arr); i<Math.max(...arr) + 1; i++){
    console.log(i);
    acummulate += i;
  }
  return acummulate;
}

//Diff Two Arrays
function diffArray(arr1, arr2) {
 return arr1.concat(arr2).filter(eachNum => !arr2.includes(eachNum) || !arr1.includes(eachNum));
  // Same, same; but different.
}

    diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

//Alternative
function diffArray(arr1, arr2) {
    return arr1
      .filter(eachNum => !arr2.includes(eachNum))
      .concat(
        arr2.filter(eachNum => !arr1.includes(eachNum))
      );
}


//Seek and Destroy
function destroyer(arr) {
  var argsCopy = Array.from(arguments).slice(1);
  return arr.filter(function(element) {
    return !argsCopy.includes(element);
  });
}
destroyer([1, 2, 3, 1, 2, 3], 2, 3);


where art thou

function whatIsInAName(collection, source) {
  let sourceKey = Object.keys(source);
 return collection.filter(function(obj){
    for(let i=0; i< sourceKey.length; i++){
      if(!obj.hasOwnProperty(sourceKey[i]) || obj[sourceKey[i]] !== source[sourceKey[i]] ){
        return false;
      }
    } 
   return true;
  }); 
}


//Alternative
function whatIsInAName(collection, source) {
  // "What's in a name? that which we call a rose
  // By any other name would smell as sweet.”
  // -- by William Shakespeare, Romeo and Juliet
  var srcKeys = Object.keys(source);

  // filter the collection
  return collection.filter(function (obj) {
    // return a Boolean value for `filter` method
    return srcKeys.every(function (key) {
      // reduce to Boolean value to be returned for `every` method
      return obj.hasOwnProperty(key) && obj[key] === source[key];
    });
  }); 
}

//shorter alternative
function whatIsInAName(collection, source) {
  var sourceKeys = Object.keys(source);
  return collection.filter(obj => sourceKeys.every(key => obj.hasOwnProperty(key) && obj[key] === source[key])) ;
}


console.log( whatIsInAName( [{ "apple": 1 }, { "apple": 1 }, { "apple": 1, "bat": 2 }], { "apple": 1 } ))


//Alternative
function whatIsInAName(collection, source) {
let sourceKey = Object.keys(source);
  return collection.filter(function(obj){
    for(let i=0; i<sourceKey.length;i++){
      if(!obj.hasOwnProperty(sourceKey[i]) || obj[sourceKey[i]]!== source[sourceKey[i]]){
        return false;  
      } 
    }
    return true;
  });
} 



//Pig Latin
function translatePigLatin(str) {
  //get all consonants at the beginning
 let consonantStart = str.match(/^[a-z]/ && /[^aeiou]*/).join();
  
  if(consonantStart === ""){
   kk = str + "way";
  }else{
    kk = str.replace(consonantStart, "");
    kk = kk + consonantStart + "ay";
  } 
  return kk;

}

translatePigLatin("consonant");

//Alternative
function translatePigLatin(str) {
    var strArr = [];
    var tmpChar;
    
    // check if the char is consonant using RegEx
    function isConsonant(char) {
        return !/[aeiou]/.test(char);
    }
    
    // return initial str + "way" if it starts with vowel 
    // if not - convert str to array
    if (!isConsonant(str.charAt(0)))
        return str + "way";
    else 
        strArr = str.split("");
        
    // push all consonats to the end of the array
    while (isConsonant(strArr[0])) {
        tmpChar = strArr.shift();
        strArr.push(tmpChar);
    }
 // convert array to string and concatenate "ay" at the end  
 return strArr.join("")+"ay";
}

// test here
translatePigLatin("consonant");



//Search and Replace
function myReplace(str, before, after) {
  isUpperCase = (str => str===str.toUpperCase());
  isLowerCase = (str => str===str.toLowerCase());
  
   if(isUpperCase(before.charAt(0)) ){
  after = after.replace(after.charAt(0), after.charAt(0).toUpperCase() );
     }

return str.replace(before, after);
}

myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");


//DNA Pairing
function pairElement(str) {
 let all=[];
  for(i=0; i<str.length; i++){
     switch(str.charAt(i)){
       case "A":
          all.push(["A", "T"]);
         break;
     
       case "T":
       all.push(["T", "A"]);
         break;
         
       case "G":
          all.push(["G", "C"]);
         break;
     
       case "C":
       all.push(["C", "G"]);
         break;
     }
  }
  return all;
}

pairElement("GCG");
function pairElement(str) {
  // Return each strand as an array of two elements, the original and the pair.
  var paired = [];

  // Function to check with strand to pair.
  var search = function(char) {
    switch (char) {
      case 'A':
        paired.push(['A', 'T']);
        break;
      case 'T':
        paired.push(['T', 'A']);
        break;
      case 'C':
        paired.push(['C', 'G']);
        break;
      case 'G':
        paired.push(['G', 'C']);
        break;
    }
  };

  // Loops through the input and pair.
  for (var i = 0; i < str.length; i++) {
    search(str[i]);
  }

  return paired;
}

// test here
pairElement("GCG");



//Missing letters
function fearNotLetter(str) {
  /*Alphabet function by: Alireza
  source: https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp. I converted to ES6 format and edited to take full range of letters*/
  
 alphabetRange = ((start, end) => 
new Array(end.charCodeAt(0) - start.charCodeAt(0) +1).fill().map( (d, i) => String.fromCharCode(i + start.charCodeAt(0))) );
  
 let completeLetters = alphabetRange(str.charAt(0), str.charAt(str.length - 1));
  
  str = str.split("");
 for(i=0; i<completeLetters.length; i++){
   if(str.indexOf(completeLetters[i])===-1){
     return completeLetters[i];
   }
 }
  
}

fearNotLetter("abce");


//Alternative:

function pairElement(str) {
  //define a map object with all pair possibilities 
  var map = {T:'A', A:'T', G:'C', C:'G'};
  //split str into a a char Array
  strArr = str.split('');
  //replace each Array item with a 2d Array using map
  for (var i=0;i<strArr.length;i++){
    strArr[i]=[strArr[i], map[strArr[i]]];
  }
 return strArr;
}

// test here
pairElement("GCG");



//Sorted Union
function uniteUnique(arr) {
  let argsArray=[];
  for(i=0; i<arguments.length; i++){
    //get all arguments into one array
    argsArray = argsArray.concat(arguments[i]);
  }
  //filter out the repeated elements. This leverages on the fact that indexOf uses that of the first element and not the latter
  argsArray=argsArray.filter((element, positon) => argsArray.indexOf(element)===positon);
  return argsArray;  
}


uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);



//Convert HTML Entities
function convertHTML(str) {
  // &colon;&rpar;
      str = str.replace(/&/g, "&amp;");
     str = str.replace(/</g, "&lt;");
      str = str.replace(">", "&gt;") ;
      str = str.replace(/"/g, "&quot;") ;
      str = str.replace(/'/g, "&apos;");
  return str;
}

convertHTML("Dolce & Gabbana");



//Sum All Odd Fibonacci Numbers
function sumFibs(num) {
  // create an array of fib numbers till num
  var arrayOddFibo = [1];
  for (var i = 1; i <=num;) {
      arrayOddFibo .push(i);
      i = arrayOddFibo [arrayOddFibo .length - 1] + arrayOddFibo [arrayOddFibo .length - 2];
  }
  
  // return the sum of odd numbers from the array
  var res = arrayOddFibo .reduce(function(prev, curr) { 
      if (curr%2 !== 0) return prev + curr;
      else return prev;
    });
  
  return res;
}

// test here
sumFibs(4);



#Sum All Primes

function isPrime(number) {
  if (typeof number !== 'number' || !Number.isInteger(number)) {
    return false;
  }

  if (number < 2) {
    return false;
  }

  if (number === 2) {
    return true;
  } else if (number % 2 === 0) {
    return false;
  }
 
  for (var i = 3; i*i <= number; i += 2) {
    if (number % i === 0) {
      return false;
    }
  }
  return true;

}



function sumPrimes(num) {
  
sum= 0;
for(let j=0; j<=num; j++){
  if(isPrime(j)){
    sum+=j;
  }
}
  return sum;
}

sumPrimes(10);

