//INHERITANCE


function Animal(){
  this.name = "Animal";
  
  this.toString = function(){
    return "My name is " + this.name;
  };
}

function Canine(){
  this.name = "Canine"
}

function Wolf(){
  this.name = "Wolf";
}

//Overwriting construcor
//Inherit from the Animal properties(objects, methods)
Canine.prototype = new Animal();

//Create another level of inheritance
Wolf.prototype = new Canine();

//NOTE: after overwriting a constructor, the prototype will point to the main object. So, it is important 
//to reset the constructor back to its original constructor

Canine.prototype.constructor = Canine;
Wolf.prototype.constructor = Wolf;

let finnishWolf = new Wolf();

//This can now access toString even though it is in the parent object "Animal". It uses function "toString" in "Animal" and the name in "Wolf" since wolf also has the property "name". if name is deleted from wolf constructor, it will refer to the name in Canine which is "Canine.
console.log(finnishWolf.toString()) //"My name is Wolf"

console.log("Wolf is an instance of Animal?: "+ (finnishWolf instanceof Animal)); //"Wolf is an instance of Animal?: true"


//This is because wolf inherited from Canine, on a second level indirectly from Animal
console.log("Wolf is an instance of Canine?: "+ (finnishWolf instanceof Canine)); //"Wolf is an instance of Canine?: true"




//REASSIGNING THE OBJECTS IN PROTOTYPES.
Animal.prototype.sound = "Skrrrrrrrr";
Animal.prototype.playSound= function(){
  return this.name + " shouts " + this.sound;
}


//We're also able to reassign the prototype
Canine.prototype.sound = "drreeeeeee Canine";
Wolf.prototype.sound = "ziiiiiiii Wolf"

console.log(finnishWolf.sound);   //"ziiiiiiii Wolf"

console.log(finnishWolf.playSound());   //"Wolf shouts ziiiiiiii Wolf"


function Rodent(){
  this.name = "Rodent";
}

function Rat(){
  this.name = "Rat";
}

Rodent.prototype = new Animal();

Rat.prototype = Rodent.prototype;
Rodent.prototype.constructor = Rodent;
Rat.prototype.constructor = Rat;


let toughRat = new Rat();

console.log(toughRat.toString());  //"My name is Rat"


//SIMPLIFYING INHERITANCE USING INTERMEDIATE FUNCTION
//Handling assigning prototypes and assigning constructors, to make sure everything works.

function extend(Child, Parent){
  let Temporary = function(){}; //Object
  
  Temporary.prototype = Parent.prototype;
  Child.prototype = new Temporary();
  Child.prototype.constructor = Child;
}


function Deer(){
  this.name = "Deer";
  this.sound = "Snort";
}

extend(Deer, Animal)

let elk = new Deer();

console.log(elk.playSound()) //"Deer shouts Snort"