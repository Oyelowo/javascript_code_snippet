PROVIDE USEFUL WAYS TO GET AND SET VALUES
GETTERS AND SETTERS FOR OBJECTS
let data = {
  name:  "No Name",
  course:  "No Course",
  school:  "No School",
  
  get getData(){
    return this.name + ", " + this.course + "," + this.school;
  },
  
  set setData(theData){
    let parts = theData.toString().split(", ");
    this.name = parts[0] || ""; //(|| "") is used in case user enters nothing
    this.course = parts[1] || "";
    this.school = parts[2] || "";
  }
} 

data.setData = "Oyelowo, Geoinformatics, Uni Helsinki";

console.log("Data: " + data.getData); //Output:  "Data: Oyelowo, Geoinformatics,Uni Helsinki"

//Specific variables can also be gotten becauase they had been defined separately
console.log("Course: " + data.course); //Output: "Course: Geoinformatics"



let Circle = function(radius){
  this._radius = radius;
}


GETTERS AND SETTERS IN ECMASCRIPT 5.1/ES5.1 (BEST THUS FAR)
The below creates getters and setters for the constructor
Circle.prototype = {
  set radius(radius){
    this._radius = radius;
  },
  get radius(){
    return this._radius;
  },
  get area(){
    return Math.PI * (this._radius * this._radius);
  }
};

let firstCircle = new Circle(33);

console.log(firstCircle.radius); //33

console.log(firstCircle.area.toFixed(3)) // to 3 decimal places: "3421.194"







//This uses a constructor


ANOTHER METHOD
//GETTERS AND SETTERS USING DEFINE PROPERTY: 

function Point(){
  this.xPos = 0;
  this.yPos = 0;
}

//every function in javascript is inherited from 'Object'
Object.defineProperty(Point.prototype, "pointPos", {
  get: function(){
    return "X " + this.xPos + " Y: " + this.yPos;
  },
  set: function(thePoint){
    let parts = thePoint.toString().split(", ");
    this.xPos = parts[0] || "";
    this.yPos = parts[1] || "";
  }
});


let onePoint = new Point();

onePoint.pointPos = "250, 490";

console.log(onePoint.pointPos),  //"250, 490"
console.log(onePoint.xPos); //"250"
console.log(onePoint.yPos); //"490"




ANOTHER METHOD.
//DEPRECATED GETTERS AND SETTERS FOR CONSTRUCTOR.
//This uses a constructor

function StudentData(){
  this.name =  "No Name";
  this.course =  "No Course";
  this.school =  "No School";
}

Object.__defineGetter__.call(StudentData.prototype, 
       "getData", function(){
        return "Name: " + this.name + " Course: " + this.course + " School: " + this.school;
});


Object.__defineSetter__.call(StudentData.prototype, 
       "setData", function(data){
        let parts = data.toString().split(", ");
        this.name = parts[0];
        this.course = parts[1];
        this.school = parts[2];
});

let student1 = new StudentData();

student1.setData = "Oyelowo, Geoinfomratics, University of Helsinki";

console.log(student1.getData);  //"Name: Oyelowo Course: Geoinfomratics School: University of Helsinki"University of Helsinki"

console.log(student1.name);  //"Oyelowo"
console.log(student1.course); //"Geoinfomratics"
console.log(student1.school);  // "University of Helsinki"

EXAMPLE 2: GETTERS AND SETTERS FOR CONSTRUCTOR

function Coordinates(){
  this.latitude = 0;
  this.longitude = 0;
}

Object.__defineGetter__.call(Coordinates.prototype, 
       "getCoords", function(){
        return "lat: " + this.latitude + " Long: " + this.longitude;
});


Object.__defineSetter__.call(Coordinates.prototype, 
       "setCoords", function(coords){
        let parts = coords.toString().split(", ");
        this.latitude = parts[0];
        this.longitude = parts[1];
});

const exampleCoords = new Coordinates();

exampleCoords.setCoords = "60.25, 81.10";

console.log(exampleCoords.getCoords);  //"lat: 60.25 Long: 81.10"

console.log(exampleCoords.latitude);  //"60.25"
console.log(exampleCoords.longitude); //"81.10"




